{
  "name": "Karooma Amazon Product Sync",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 6 * * *"
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Daily Sync at 6AM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "functionCode": "// Lista de URLs da Amazon para monitorar\nconst amazonUrls = [\n  \"https://amzn.to/44TPsu4\",  // Balance Bike Nathor\n  // Adicione mais URLs aqui\n];\n\n// Configuração do Karooma\nconst KAROOMA_API_BASE = \"https://seu-projeto.replit.app\";\n\n// Preparar dados para processamento\nconst items = amazonUrls.map((url, index) => ({\n  json: {\n    amazonUrl: url,\n    index: index,\n    karoomaApiBase: KAROOMA_API_BASE,\n    timestamp: new Date().toISOString()\n  }\n}));\n\nreturn items;"
      },
      "id": "prepare-urls",
      "name": "Prepare URLs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.amazonUrl }}",
        "options": {
          "timeout": 30000,
          "headers": {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          }
        }
      },
      "id": "fetch-amazon-page",
      "name": "Fetch Amazon Page",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "// Extrair dados da página da Amazon\nconst html = $input.first().json.data;\nconst url = $input.first().json.amazonUrl;\n\n// Função para extrair texto entre tags\nfunction extractBetween(text, start, end) {\n  const startIndex = text.indexOf(start);\n  if (startIndex === -1) return null;\n  const endIndex = text.indexOf(end, startIndex + start.length);\n  if (endIndex === -1) return null;\n  return text.substring(startIndex + start.length, endIndex).trim();\n}\n\n// Função para limpar texto\nfunction cleanText(text) {\n  return text ? text.replace(/\\s+/g, ' ').trim() : '';\n}\n\n// Extrair título\nconst titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i);\nconst title = titleMatch ? cleanText(titleMatch[1].replace(' : Amazon.com.br', '')) : '';\n\n// Extrair preço atual\nconst priceMatches = html.match(/R\\$\\s*([\\d,\\.]+)/g) || [];\nconst currentPrice = priceMatches.length > 0 ? \n  parseFloat(priceMatches[0].replace('R$', '').replace(',', '.').trim()) : null;\n\n// Extrair avaliação\nconst ratingMatch = html.match(/(\\d+[,\\.]\\d+)\\s*de\\s*5\\s*estrelas/i);\nconst rating = ratingMatch ? parseFloat(ratingMatch[1].replace(',', '.')) : null;\n\n// Extrair número de avaliações\nconst reviewMatch = html.match(/(\\d+[\\.,]?\\d*)\\s*avaliações/i);\nconst reviewCount = reviewMatch ? parseInt(reviewMatch[1].replace(/[\\.,]/g, '')) : null;\n\n// Extrair imagem\nconst imageMatch = html.match(/\"hiRes\"\\s*:\\s*\"([^\"]+)\"/i) || \n                  html.match(/\"large\"\\s*:\\s*\"([^\"]+)\"/i);\nconst imageUrl = imageMatch ? imageMatch[1] : null;\n\n// Mapear categoria baseado no título/URL\nfunction mapCategory(title, url) {\n  const titleLower = title.toLowerCase();\n  if (titleLower.includes('bicicleta') || titleLower.includes('bike') || \n      titleLower.includes('brinquedo') || titleLower.includes('infantil')) {\n    return 'familia';\n  }\n  if (titleLower.includes('casa') || titleLower.includes('cozinha') || \n      titleLower.includes('organiz')) {\n    return 'casa';\n  }\n  if (titleLower.includes('beleza') || titleLower.includes('cuidado') || \n      titleLower.includes('cosmétic')) {\n    return 'autocuidado';\n  }\n  if (titleLower.includes('saúde') || titleLower.includes('vitamina') || \n      titleLower.includes('supplement')) {\n    return 'saude';\n  }\n  if (titleLower.includes('eletrônic') || titleLower.includes('computador') || \n      titleLower.includes('celular')) {\n    return 'tecnologia';\n  }\n  return 'casa'; // default\n}\n\n// Gerar descrição baseada no título\nfunction generateDescription(title) {\n  if (title.toLowerCase().includes('bicicleta') && title.toLowerCase().includes('infantil')) {\n    return `${title}. Produto ideal para desenvolvimento motor e diversão das crianças, com qualidade comprovada na Amazon.`;\n  }\n  return `${title}. Produto selecionado com base em avaliações positivas e qualidade comprovada na Amazon.`;\n}\n\nconst extractedData = {\n  title: title,\n  description: generateDescription(title),\n  currentPrice: currentPrice,\n  rating: rating,\n  reviewCount: reviewCount,\n  imageUrl: imageUrl,\n  category: mapCategory(title, url),\n  affiliateLink: url,\n  featured: rating >= 4.5,\n  inStock: true,\n  extractedAt: new Date().toISOString(),\n  karoomaApiBase: $input.first().json.karoomaApiBase\n};\n\nreturn [{ json: extractedData }];"
      },
      "id": "extract-product-data",
      "name": "Extract Product Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.title }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "leftValue": "={{ $json.currentPrice }}",
              "rightValue": 10,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            },
            {
              "leftValue": "={{ $json.currentPrice }}",
              "rightValue": 5000,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ],
          "combineOperation": "all"
        }
      },
      "id": "validate-data",
      "name": "Validate Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "functionCode": "// Formatar dados para API do Karooma\nconst data = $input.first().json;\n\nconst formattedProduct = {\n  title: data.title.substring(0, 255), // Limitar título\n  description: data.description.substring(0, 500), // Limitar descrição\n  category: data.category,\n  imageUrl: data.imageUrl,\n  currentPrice: data.currentPrice ? data.currentPrice.toString() : null,\n  originalPrice: null, // Será calculado se houver desconto\n  discount: null,\n  rating: data.rating ? data.rating.toString() : null,\n  affiliateLink: data.affiliateLink,\n  featured: data.featured || false,\n  inStock: data.inStock\n};\n\nreturn [{\n  json: {\n    productData: formattedProduct,\n    karoomaApiBase: data.karoomaApiBase,\n    originalData: data\n  }\n}];"
      },
      "id": "format-for-karooma",
      "name": "Format for Karooma",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 240]
    },
    {
      "parameters": {
        "url": "={{ $json.karoomaApiBase }}/api/automation/products/sync",
        "method": "POST",
        "sendHeaders": true,
        "headers": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "User-Agent",
              "value": "n8n-KaroomaBot/1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "={{ JSON.stringify($json.productData) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "sync-to-karooma",
      "name": "Sync to Karooma",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 240]
    },
    {
      "parameters": {
        "functionCode": "// Log de sucesso\nconst response = $input.first().json;\nconst originalData = $input.first().json.originalData;\n\nconsole.log('✅ Produto sincronizado com sucesso:');\nconsole.log('Título:', originalData.title);\nconsole.log('Preço:', originalData.currentPrice);\nconsole.log('Rating:', originalData.rating);\nconsole.log('Categoria:', originalData.category);\nconsole.log('Resposta API:', response);\n\nreturn [{\n  json: {\n    status: 'success',\n    product: originalData.title,\n    price: originalData.currentPrice,\n    rating: originalData.rating,\n    timestamp: new Date().toISOString(),\n    apiResponse: response\n  }\n}];"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 240]
    },
    {
      "parameters": {
        "functionCode": "// Log de erro/dados inválidos\nconst data = $input.first().json;\n\nconsole.log('❌ Dados inválidos ou incompletos:');\nconsole.log('Título:', data.title || 'VAZIO');\nconsole.log('Preço:', data.currentPrice || 'VAZIO');\nconsole.log('URL:', data.affiliateLink || 'VAZIO');\n\nif (!data.title) {\n  console.log('Erro: Título não encontrado na página');\n}\nif (!data.currentPrice || data.currentPrice < 10 || data.currentPrice > 5000) {\n  console.log('Erro: Preço inválido ou fora do range (R$ 10 - R$ 5000)');\n}\n\nreturn [{\n  json: {\n    status: 'error',\n    reason: 'dados_invalidos',\n    data: data,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-error",
      "name": "Log Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1340, 400]
    },
    {
      "parameters": {
        "functionCode": "// Relatório final consolidado\nconst allResults = $input.all();\n\nconst successCount = allResults.filter(item => item.json.status === 'success').length;\nconst errorCount = allResults.filter(item => item.json.status === 'error').length;\nconst totalCount = allResults.length;\n\nconst report = {\n  timestamp: new Date().toISOString(),\n  summary: {\n    total: totalCount,\n    success: successCount,\n    errors: errorCount,\n    successRate: totalCount > 0 ? ((successCount / totalCount) * 100).toFixed(1) + '%' : '0%'\n  },\n  details: allResults.map(item => ({\n    status: item.json.status,\n    product: item.json.product || 'N/A',\n    price: item.json.price || 'N/A',\n    rating: item.json.rating || 'N/A'\n  }))\n};\n\nconsole.log('📊 RELATÓRIO FINAL - Karooma Product Sync');\nconsole.log('=' .repeat(50));\nconsole.log(`Total de produtos processados: ${report.summary.total}`);\nconsole.log(`Sucessos: ${report.summary.success}`);\nconsole.log(`Erros: ${report.summary.errors}`);\nconsole.log(`Taxa de sucesso: ${report.summary.successRate}`);\nconsole.log(`Data/Hora: ${report.timestamp}`);\nconsole.log('=' .repeat(50));\n\nif (report.summary.success > 0) {\n  console.log('✅ Produtos sincronizados com sucesso:');\n  report.details\n    .filter(item => item.status === 'success')\n    .forEach(item => {\n      console.log(`  • ${item.product} - R$ ${item.price} (${item.rating}⭐)`);\n    });\n}\n\nif (report.summary.errors > 0) {\n  console.log('❌ Produtos com erro:');\n  report.details\n    .filter(item => item.status === 'error')\n    .forEach(item => {\n      console.log(`  • ${item.product || 'Erro na extração'}`);\n    });\n}\n\nreturn [{ json: report }];"
      },
      "id": "final-report",
      "name": "Final Report",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2000, 320]
    }
  ],
  "connections": {
    "Daily Sync at 6AM": {
      "main": [
        [
          {
            "node": "Prepare URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare URLs": {
      "main": [
        [
          {
            "node": "Fetch Amazon Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Amazon Page": {
      "main": [
        [
          {
            "node": "Extract Product Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Product Data": {
      "main": [
        [
          {
            "node": "Validate Data",
            "type": "main", 
            "index": 0
          }
        ]
      ]
    },
    "Validate Data": {
      "main": [
        [
          {
            "node": "Format for Karooma",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format for Karooma": {
      "main": [
        [
          {
            "node": "Sync to Karooma",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sync to Karooma": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        [
          {
            "node": "Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Error": {
      "main": [
        [
          {
            "node": "Final Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "callerPolicy": "any"
    }
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-07-31T08:30:00.000Z",
      "updatedAt": "2025-07-31T08:30:00.000Z",
      "id": "karooma",
      "name": "karooma"
    },
    {
      "createdAt": "2025-07-31T08:30:00.000Z", 
      "updatedAt": "2025-07-31T08:30:00.000Z",
      "id": "amazon",
      "name": "amazon"
    },
    {
      "createdAt": "2025-07-31T08:30:00.000Z",
      "updatedAt": "2025-07-31T08:30:00.000Z", 
      "id": "automation",
      "name": "automation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-07-31T08:30:00.000Z",
  "versionId": "1"
}