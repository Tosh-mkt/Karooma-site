#!/usr/bin/env node

/**
 * üîç SCRIPT DE VERIFICA√á√ÉO DE VARI√ÅVEIS DE AMBIENTE
 * 
 * Este script verifica se todas as vari√°veis necess√°rias
 * est√£o configuradas corretamente para produ√ß√£o.
 */

console.log('üîç Verificando configura√ß√µes de ambiente...\n');

const requiredEnvVars = {
  'NODE_ENV': {
    required: true,
    expectedValue: 'production',
    description: 'Ambiente de execu√ß√£o'
  },
  'SESSION_SECRET': {
    required: true,
    minLength: 32,
    description: 'Chave secreta para sess√µes'
  },
  'DATABASE_URL': {
    required: true,
    pattern: /^postgresql:\/\/.+/,
    description: 'URL de conex√£o PostgreSQL'
  },
  'SENDGRID_API_KEY': {
    required: true,
    pattern: /^SG\..+/,
    description: 'API Key do SendGrid'
  },
  'GOOGLE_CLIENT_ID': {
    required: false,
    pattern: /\.apps\.googleusercontent\.com$/,
    description: 'Google OAuth Client ID'
  },
  'GOOGLE_CLIENT_SECRET': {
    required: false,
    minLength: 10,
    description: 'Google OAuth Client Secret'
  },
  'NEXTAUTH_URL': {
    required: false,
    pattern: /^https?:\/\/.+/,
    description: 'URL base da aplica√ß√£o'
  }
};

let allValid = true;
let warnings = [];

console.log('üìã RESULTADO DA VERIFICA√á√ÉO:');
console.log('‚ïê'.repeat(50));

for (const [varName, config] of Object.entries(requiredEnvVars)) {
  const value = process.env[varName];
  let status = '‚úÖ';
  let message = 'Configurada';

  if (!value) {
    if (config.required) {
      status = '‚ùå';
      message = 'OBRIGAT√ìRIA - N√£o configurada';
      allValid = false;
    } else {
      status = '‚ö†Ô∏è';
      message = 'Opcional - N√£o configurada';
      warnings.push(varName);
    }
  } else {
    // Verificar comprimento m√≠nimo
    if (config.minLength && value.length < config.minLength) {
      status = '‚ùå';
      message = `Muito curta (m√≠n: ${config.minLength} chars)`;
      allValid = false;
    }
    
    // Verificar padr√£o
    if (config.pattern && !config.pattern.test(value)) {
      status = '‚ùå';
      message = 'Formato inv√°lido';
      allValid = false;
    }
    
    // Verificar valor esperado
    if (config.expectedValue && value !== config.expectedValue) {
      status = '‚ö†Ô∏è';
      message = `Esperado: ${config.expectedValue}, Atual: ${value}`;
      warnings.push(varName);
    }
  }

  console.log(`${status} ${varName.padEnd(20)} - ${message}`);
  console.log(`   ${config.description}`);
  console.log('');
}

console.log('‚ïê'.repeat(50));

if (allValid && warnings.length === 0) {
  console.log('üéâ SUCESSO! Todas as configura√ß√µes est√£o corretas.');
  process.exit(0);
} else if (allValid) {
  console.log('‚ö†Ô∏è  FUNCIONANDO com avisos:');
  warnings.forEach(warning => {
    console.log(`   ‚Ä¢ ${warning} - Configure para funcionalidade completa`);
  });
  process.exit(0);
} else {
  console.log('‚ùå ERRO! Configura√ß√µes obrigat√≥rias est√£o faltando.');
  console.log('   Configure as vari√°veis marcadas com ‚ùå antes do deploy.');
  process.exit(1);
}